name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: python-flask-ariadne-api
  PYTHON_VERSION: "3.10"

jobs:
  # ========================================
  # STAGE 1: Build & Install
  # ========================================
  build-and-install:
    name: Build & Install Dependencies
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Verify installation
        run: |
          python --version
          pip list
      
      - name: Upload dependencies for next stages
        uses: actions/upload-artifact@v4
        with:
          name: python-dependencies
          path: |
            requirements.txt
            requirements-dev.txt
          retention-days: 1

  # ========================================
  # STAGE 2: Lint & Security Scan
  # ========================================
  lint-and-security:
    name: Lint & Security Scan
    runs-on: ubuntu-latest
    needs: build-and-install
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Run Pylint
        run: |
          echo "Running Pylint code quality checks..."
          pylint api/ --exit-zero --output-format=text || true
      
      - name: Run Security Scan with Bandit
        run: |
          echo "Running Bandit security scanner..."
          pip install bandit
          bandit -r api/ -f json -o bandit-report.json || true
          bandit -r api/ || true
      
      - name: Check for known security vulnerabilities
        run: |
          echo "Checking for known vulnerabilities in dependencies..."
          pip install safety
          safety check --json || true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
          retention-days: 7

  # ========================================
  # STAGE 3: Test with Database Service
  # ========================================
  test:
    name: Run Tests with PostgreSQL
    runs-on: ubuntu-latest
    needs: lint-and-security
    
    # PostgreSQL service container
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: pfaas_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ env.PYTHON_VERSION }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt', '**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
      
      - name: Wait for PostgreSQL to be ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          for i in {1..30}; do
            pg_isready -h localhost -p 5432 -U postgres && break
            echo "Waiting for PostgreSQL... attempt $i"
            sleep 2
          done
      
      - name: Set up test environment variables
        run: |
          echo "Setting up test environment..."
          export POSTGRES_HOST=localhost
          export POSTGRES_PORT=5432
          export POSTGRES_USER=postgres
          export POSTGRES_PASSWORD=docker
          export POSTGRES_DB=pfaas_test
          export FLASK_ENV=testing
          export SECRET_KEY=test-secret-key
      
      - name: Run database migrations
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: pfaas_test
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
        run: |
          echo "Setting up database..."
          # Database will be initialized by tests/conftest.py
          echo "Database ready for testing"
      
      - name: Run tests with coverage
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: docker
          POSTGRES_DB: pfaas_test
          POSTGRES_DB_TEST: pfaas_test
          POSTGRES_HOST_TEST: localhost
          POSTGRES_PORT_TEST: 5432
          POSTGRES_USER_TEST: postgres
          POSTGRES_PASSWORD_TEST: docker
          FLASK_ENV: testing
          SECRET_KEY: test-secret-key
        run: |
          echo "Running test suite with coverage..."
          pytest tests/ -v --cov=api --cov-report=xml --cov-report=html --cov-report=term
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-reports
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7
      
      - name: Display coverage summary
        if: always()
        run: |
          echo "Coverage Summary:"
          coverage report || true

  # ========================================
  # STAGE 4: Build Docker Image
  # ========================================
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        run: |
          echo "Building Docker image..."
          docker build -f Dockerfile -t ${{ env.DOCKER_IMAGE_NAME }}:latest .
      
      - name: Test Docker image
        run: |
          echo "Testing if Docker image was built successfully..."
          docker images | grep ${{ env.DOCKER_IMAGE_NAME }}
      
      - name: Save Docker image as artifact
        run: |
          echo "Saving Docker image to tar file..."
          docker save ${{ env.DOCKER_IMAGE_NAME }}:latest | gzip > docker-image.tar.gz
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: docker-image.tar.gz
          retention-days: 1

  # ========================================
  # STAGE 5: Deploy (Conditional)
  # ========================================
  deploy:
    name: Deploy to Docker Hub
    runs-on: ubuntu-latest
    needs: build-docker-image
    # Only deploy on main branch when all tests pass
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Download Docker image artifact
        uses: actions/download-artifact@v4
        with:
          name: docker-image
      
      - name: Load Docker image
        run: |
          echo "Loading Docker image from artifact..."
          docker load < docker-image.tar.gz
      
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Tag Docker image
        run: |
          echo "Tagging Docker image..."
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker tag ${{ env.DOCKER_IMAGE_NAME }}:latest ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
      
      - name: Push Docker image to Docker Hub
        run: |
          echo "Pushing Docker image to Docker Hub..."
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:${{ github.sha }}
      
      - name: Display deployment logs
        run: |
          echo "============================================"
          echo "DEPLOYMENT SUCCESSFUL!"
          echo "============================================"
          echo "Image: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest"
          echo "Tag: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Commit: ${{ github.sha }}"
          echo "Pushed at: $(date)"
          echo "============================================"
      
      - name: Create deployment summary
        run: |
          echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "✅ Docker image successfully pushed to Docker Hub!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Image:** \`${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}:latest\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** \`$(date)\`" >> $GITHUB_STEP_SUMMARY

  # ========================================
  # Pipeline Summary Job
  # ========================================
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-install, lint-and-security, test, build-docker-image]
    if: always()
    
    steps:
      - name: Generate pipeline summary
        run: |
          echo "## 📊 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Pipeline Stages:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Stage 1: Build & Install" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Stage 2: Lint & Security Scan" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Stage 3: Test with PostgreSQL" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Stage 4: Build Docker Image" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️  Stage 5: Deploy (runs only on main branch)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
