name: CI

on:
  push:
    branches: ["**"]
  pull_request:

jobs:
  build:
    name: 1) Build & Install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps (best effort)
        run: |
          pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

  lint:
    name: 2) Lint / Security
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install linters
        run: |
          pip install flake8 bandit || true
      - name: Run flake8
        run: flake8 || true
      - name: Run bandit
        run: bandit -r . || true

  test:
    name: 3) Test (placeholder until DB ready)
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install test deps
        run: |
          pip install pytest requests || true
      - name: Run sample test
        run: |
          python - <<'PY'
          print("OK - placeholder test; Step 2 will add DB-backed tests")
          PY


  build_image:
    name: 4) Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build image (skip if no Dockerfile yet)
        run: |
          if [ -f Dockerfile ]; then
            docker build -t flask-graphql:ci .
          else
            echo "No Dockerfile found yet. Skipping image build."
          fi


  deploy:
    name: 5) Deploy (Push to Docker Hub)
    runs-on: ubuntu-latest
    needs: [build, lint, test, build_image]
    if: ${{ github.ref == 'refs/heads/main' && hashFiles('Dockerfile') != '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      - name: Tag image for Docker Hub
        run: |
          docker tag flask-graphql:ci ${{ secrets.DOCKERHUB_USERNAME }}/flask-graphql:main-${{ github.sha }}
          docker tag flask-graphql:ci ${{ secrets.DOCKERHUB_USERNAME }}/flask-graphql:latest

      - name: Push image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-graphql:main-${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/flask-graphql:latest

      - name: Confirm pushed tags
        run: |
          echo "âœ… Image pushed to:"
          echo "https://hub.docker.com/r/${{ secrets.DOCKERHUB_USERNAME }}/flask-graphql/tags"
